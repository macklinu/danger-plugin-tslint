/**
 * @module tslint
 */
/**
 * This second comment is required until
 * https://github.com/christopherthielen/typedoc-plugin-external-module-name/issues/6 is resolved.
 */

import * as fs from 'fs'
import { IRuleFailureJson } from 'tslint'

import { defaultResultHandler } from './resultHandlers'

export interface IPluginConfig {
  /**
   * The path to the file generated by running `tslint --format json`.
   */
  lintResultsJsonPath: string
  /**
   * A JSON array generated by running `tslint --format json`.
   */
  lintResultsJson: IRuleFailureJson[]
  /**
   * An optional function to handle TSLint results.
   * When there are no violations, `results` will be an empty array.
   * Otherwise, TSLint has reported violations.
   *
   * It is up to the caller to format each lint result
   * and call the appropriate Danger functions (e.g., `fail()`).
   *
   * See the `defaultResultHandler` in `src/resultHandlers.ts`
   * for the default implementation.
   */
  handleResults?(results: IRuleFailureJson[]): void
}

/** Reads */
const getLintResults = (path: string): IRuleFailureJson[] | null => {
  try {
    const fileContents = fs.readFileSync(path, 'utf8')
    return JSON.parse(fileContents)
  } catch (e) {
    // tslint:disable-next-line:no-console
    console.error(e)
    return null
  }
}

/**
 * Runs TSLint on a project's source code and reports results to Danger.
 *
 * * If there are any lint violations, Danger will fail the build and post results in a comment.
 * * If there are no lint violations, Danger will comment saying that TSLint passed.
 * * If the `config.lintResultsJsonPath` JSON file cannot be read, Danger will comment with a warning.
 *
 * @export
 * @param config The plugin config object.
 */
export default function tslint(config: IPluginConfig): void {
  if (!config) {
    throw Error('Configuration not supplied')
  }

  const {
    lintResultsJsonPath,
    lintResultsJson,
    handleResults = defaultResultHandler,
  } = config

  const bothOptionsProvided = lintResultsJson && lintResultsJsonPath
  const noOptionsProvided = !lintResultsJson && !lintResultsJsonPath

  if (bothOptionsProvided) {
    throw Error(`'you cannot provide both lintResultsJson and lintResultsJsonPath as options.`)
  }

  if (noOptionsProvided) {
    throw Error(`'you must provide either lintResultsJson or lintResultsJsonPath as an option.`)
  }

  if (lintResultsJsonPath) {
    const results = getLintResults(lintResultsJsonPath)

    if (results === null) {
      warn('Couldn\'t read TSLint results file')
    } else {
      handleResults(results)
    }
  } else {
    if (lintResultsJson === null) {
      warn('Couldn\'t read TSLint results file')
    } else {
      handleResults(lintResultsJson)
    }
  }
}
